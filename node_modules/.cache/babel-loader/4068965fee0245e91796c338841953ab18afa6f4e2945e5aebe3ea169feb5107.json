{"ast":null,"code":"var _jsxFileName = \"/home/keanu/Downloads/projects/SWAPI/src/components/PeopleDetails.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport CardDetails from './CardDetails';\nimport AllCardsDetailsView from \"./AllCardsDetailsView\";\nimport Pagination from \"./Pagination\";\nimport pageLoader from \"../assets/loader.gif\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PeopleDetails = ({\n  search\n}) => {\n  _s();\n  const [peopleData, setPeopleData] = useState([]);\n  // const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  const [morePagesStatus, setMorePagesStatus] = useState(false);\n  const sortData = [...peopleData].sort((a, b) => a.birth.localeCompare(b.height));\n  console.log(sortData);\n\n  /*This useEffect below will be responsible for updating the page when we click the next and previous dbutton and the page nummbers . It also set a timeout to allow the loading animation to display*/\n  useEffect(() => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n    }, 600);\n  }, [currentPage]);\n  useEffect(() => {\n    fetch(`https://swapi.dev/api/people/?page=${currentPage}`).then(response => {\n      if (!response.ok) {\n        // this will throw an error if we are unable to connect to the server\n        throw new Error(\"Could not connect to the server\");\n      }\n      return response.json();\n    }).then(data => {\n      setPeopleData(data.results);\n      // this  set the total page numbers for the pagination \n      setTotalPages(Math.ceil(data.count / 10));\n    }).catch(error => setError(error));\n\n    // the current page variable below will be used to trigger the useEffect so each time the current page value changes the useEffect will run  \n  }, [currentPage]);\n  useEffect(() => {\n    fetch(`https://swapi.dev/api/people/?search=${search}`).then(response => {\n      if (!response.ok) {\n        // this will throw an error if we are unable to connect to the server\n        throw new Error(\"Could not connect to the server\");\n      }\n      return response.json();\n    }).then(data => {\n      setPeopleData(data.results);\n      // this  set the total page numbers for the pagination \n      setTotalPages(Math.ceil(data.count / 10));\n    }).catch(error => setError(error));\n\n    // the current page variable below will be used to trigger the useEffect so each time the current page value changes the useEffect will run  \n  }, [search]);\n\n  //this function is used to update the morepages states and show the other pages \n  function setMorePages(pageStatus) {\n    return setMorePagesStatus(pageStatus);\n  }\n\n  // function is used to update the crrent page state to allow switince of pages this will be pased to the Pagination component \n  function setPage(selectedPage) {\n    return setCurrentPage(selectedPage);\n  }\n  // this is used to to update the current page state this will allow switching pages using the next button this function will be passed to the pagination component \n  const nextPage = activePage => {\n    setCurrentPage(activePage);\n  };\n  // this is used to to update the current page state this will allow switching pages using the previous  button this function will be passed to the pagination component \n  const prevPage = activePage => {\n    setCurrentPage(activePage);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"ml-[500px] mt-[100px]\",\n        src: pageLoader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [peopleData.filter(item => {\n        return search.toLowerCase() === '' ? item : item.name.toLowerCase().includes(search);\n      }).map(people =>\n      /*#__PURE__*/\n      //all card details view componenet below to display the details for each card \n      _jsxDEV(AllCardsDetailsView, {\n        peopleData: people\n      }, people.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Pagination, {\n          setPageValue: setPage,\n          nextPage: nextPage,\n          prevPage: prevPage,\n          currentPage: currentPage,\n          setMorePagesStatus: setMorePages,\n          morePagesStatus: morePagesStatus,\n          totalPages: totalPages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n_s(PeopleDetails, \"/ST/ljGE2io0jbmtSxfcsd5vV/s=\");\n_c = PeopleDetails;\nexport default PeopleDetails;\nvar _c;\n$RefreshReg$(_c, \"PeopleDetails\");","map":{"version":3,"names":["useEffect","useState","React","axios","CardDetails","AllCardsDetailsView","Pagination","pageLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","PeopleDetails","search","_s","peopleData","setPeopleData","currentPage","setCurrentPage","totalPages","setTotalPages","loading","setLoading","error","setError","morePagesStatus","setMorePagesStatus","sortData","sort","a","b","birth","localeCompare","height","console","log","setTimeout","fetch","then","response","ok","Error","json","data","results","Math","ceil","count","catch","setMorePages","pageStatus","setPage","selectedPage","nextPage","activePage","prevPage","children","className","src","fileName","_jsxFileName","lineNumber","columnNumber","filter","item","toLowerCase","name","includes","map","people","setPageValue","_c","$RefreshReg$"],"sources":["/home/keanu/Downloads/projects/SWAPI/src/components/PeopleDetails.js"],"sourcesContent":["import { useEffect, useState} from \"react\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport CardDetails from './CardDetails';\nimport AllCardsDetailsView from \"./AllCardsDetailsView\";\nimport Pagination from \"./Pagination\";\nimport pageLoader from \"../assets/loader.gif\";\n const PeopleDetails = ({search}) =>{\n\n    const [peopleData, setPeopleData] = useState([]);\n    // const [error, setError] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const [morePagesStatus, setMorePagesStatus] = useState(false);\n\n    const sortData = [...peopleData].sort((a,b)=> a.birth.localeCompare(b.height));\n    console.log(sortData);\n    \n    \n    /*This useEffect below will be responsible for updating the page when we click the next and previous dbutton and the page nummbers . It also set a timeout to allow the loading animation to display*/\n        useEffect(() => {\n            setLoading(true);\n            setTimeout(() => {\n                setLoading(false)\n            }, 600);\n\n        },[currentPage]);\n\n        useEffect( () =>\n        {\n            \n            fetch(`https://swapi.dev/api/people/?page=${currentPage}`)\n            .then (response => {\n                if(!response.ok){\n                    // this will throw an error if we are unable to connect to the server\n                    throw new Error (\"Could not connect to the server\");\n                }\n                return response.json();\n            \n            })\n            .then(data => {\n                setPeopleData(data.results)\n                // this  set the total page numbers for the pagination \n                setTotalPages (Math.ceil(data.count/10))\n            })\n            \n            \n                       \n            .catch (error => setError(error));\n             \n\n        \n         // the current page variable below will be used to trigger the useEffect so each time the current page value changes the useEffect will run  \n        },[currentPage]);\n\n        \n        useEffect( () =>\n        {\n            \n            fetch(`https://swapi.dev/api/people/?search=${search}`)\n            .then (response => {\n                if(!response.ok){\n                    // this will throw an error if we are unable to connect to the server\n                    throw new Error (\"Could not connect to the server\");\n                }\n                return response.json();\n            \n            })\n            .then(data => {\n                setPeopleData(data.results)\n                // this  set the total page numbers for the pagination \n                setTotalPages (Math.ceil(data.count/10))\n            })\n            \n            \n                       \n            .catch (error => setError(error));\n             \n\n        \n         // the current page variable below will be used to trigger the useEffect so each time the current page value changes the useEffect will run  \n        },[search]);\n\n\n        //this function is used to update the morepages states and show the other pages \n        function setMorePages(pageStatus)\n        {\n            return(setMorePagesStatus(pageStatus))\n\n        }\n\n        // function is used to update the crrent page state to allow switince of pages this will be pased to the Pagination component \n        function setPage(selectedPage)\n        {\n            return(setCurrentPage(selectedPage))\n        }\n            // this is used to to update the current page state this will allow switching pages using the next button this function will be passed to the pagination component \n        const nextPage = (activePage) => {\n            setCurrentPage(activePage);\n          };\n        // this is used to to update the current page state this will allow switching pages using the previous  button this function will be passed to the pagination component \n          const prevPage = (activePage) => {\n            setCurrentPage(activePage);\n          };\n        return(\n            <>\n            {/*  The below is responsible for rendering the card details to the screen. This is also responsible for the loading screen animation */}\n               {loading ? (\n                <div>\n                    <img className=\"ml-[500px] mt-[100px]\"  src={pageLoader} />\n                </div>\n               ) :( \n                <>\n                {peopleData.filter((item) =>{\n                    return(search.toLowerCase()===''? item:\n                    item.name.toLowerCase().includes(search)\n                    );\n                } ).map((people) => (\n                //all card details view componenet below to display the details for each card \n                <AllCardsDetailsView key={people.name} peopleData={people} />\n            ))}\n            \n\n    <div>\n    {/* Using the pagination component to  display the the page numbers and also the next button*/}\n    <Pagination setPageValue={setPage} nextPage={nextPage} prevPage={prevPage} currentPage={currentPage} setMorePagesStatus={setMorePages} morePagesStatus={morePagesStatus}  totalPages={totalPages}/>\n\n</div>\n</>\n            )\n\n\n\n               }\n      \n           \n            </>\n        );\n        \n        }\n         export default PeopleDetails"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}