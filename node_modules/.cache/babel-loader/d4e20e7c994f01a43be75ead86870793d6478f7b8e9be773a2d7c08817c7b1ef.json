{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport CardDetails from './CardDetails';\nimport AllCardsDetailsView from \"./AllCardsDetailsView\";\nimport Pagination from \"./Pagination\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PeopleDetails = () => {\n  _s();\n  const [peopleData, setPeopleData] = useState([]);\n  // const [error, setError] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  useEffect(() => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n    }, 2000);\n  });\n  useEffect(() => {\n    fetch(`https://swapi.dev/api/people/?page=${currentPage}`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Could not connect to the server\");\n      }\n      return response.json();\n    }).then(data => {\n      setPeopleData(data.results);\n      setTotalPages(Math.ceil(data.count / 10));\n    }).catch(error => setError(error));\n  }, [currentPage]);\n  function setPage(selectedPage) {\n    return setCurrentPage(selectedPage);\n  }\n  const nextPage = () => {\n    setCurrentPage(currentPage + 1);\n  };\n  const prevPage = () => {\n    setCurrentPage(currentPage - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading\n  }, void 0, false);\n};\n_s(PeopleDetails, \"/j7GsrAVl0kMQhOZFvuDhbkHur4=\");\n_c = PeopleDetails;\nexport default PeopleDetails;\nvar _c;\n$RefreshReg$(_c, \"PeopleDetails\");","map":{"version":3,"names":["useEffect","useState","CardDetails","AllCardsDetailsView","Pagination","Fragment","_Fragment","jsxDEV","_jsxDEV","PeopleDetails","_s","peopleData","setPeopleData","currentPage","setCurrentPage","totalPages","setTotalPages","loading","setLoading","error","setError","setTimeout","fetch","then","response","ok","Error","json","data","results","Math","ceil","count","catch","setPage","selectedPage","nextPage","prevPage","children","_c","$RefreshReg$"],"sources":["/home/keanu/Downloads/projects/SWAPI/src/components/PeopleDetails.js"],"sourcesContent":["import { useEffect, useState} from \"react\";\nimport CardDetails from './CardDetails';\nimport AllCardsDetailsView from \"./AllCardsDetailsView\";\nimport Pagination from \"./Pagination\";\n const PeopleDetails = () =>{\n\n    const [peopleData, setPeopleData] = useState([]);\n    // const [error, setError] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n\n\n        useEffect(() => {\n            setLoading(true);\n            setTimeout(() => {\n                setLoading(false)\n            }, 2000);\n        });\n\n        useEffect( () =>\n        {\n            fetch(`https://swapi.dev/api/people/?page=${currentPage}`)\n            .then (response => {\n                if(!response.ok){\n                    throw new Error (\"Could not connect to the server\");\n                }\n                return response.json();\n            \n            })\n            .then(data => {\n                setPeopleData(data.results)\n                setTotalPages (Math.ceil(data.count/10))\n            })\n            \n            \n                       \n            .catch (error => setError(error));\n             \n\n        \n           \n        },[currentPage]);\n\n        function setPage(selectedPage)\n        {\n            return(setCurrentPage(selectedPage))\n        }\n\n        const nextPage = () => {\n            setCurrentPage(currentPage + 1);\n          };\n        \n          const prevPage = () => {\n            setCurrentPage(currentPage - 1);\n          };\n        return(\n            <>\n               {loading \n\n               }\n      \n           \n            </>\n        );\n        \n        }\n         export default PeopleDetails"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAC1C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACrC,MAAMC,aAAa,GAAGA,CAAA,KAAK;EAAAC,EAAA;EAExB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EAGhCD,SAAS,CAAC,MAAM;IACZkB,UAAU,CAAC,IAAI,CAAC;IAChBG,UAAU,CAAC,MAAM;MACbH,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC,CAAC;EAEFlB,SAAS,CAAE,MACX;IACIsB,KAAK,CAAE,sCAAqCT,WAAY,EAAC,CAAC,CACzDU,IAAI,CAAEC,QAAQ,IAAI;MACf,IAAG,CAACA,QAAQ,CAACC,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAE,iCAAiC,CAAC;MACvD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAE1B,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACVhB,aAAa,CAACgB,IAAI,CAACC,OAAO,CAAC;MAC3Bb,aAAa,CAAEc,IAAI,CAACC,IAAI,CAACH,IAAI,CAACI,KAAK,GAAC,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAIDC,KAAK,CAAEd,KAAK,IAAIC,QAAQ,CAACD,KAAK,CAAC,CAAC;EAKrC,CAAC,EAAC,CAACN,WAAW,CAAC,CAAC;EAEhB,SAASqB,OAAOA,CAACC,YAAY,EAC7B;IACI,OAAOrB,cAAc,CAACqB,YAAY,CAAC;EACvC;EAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACnBtB,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;EACjC,CAAC;EAED,MAAMwB,QAAQ,GAAGA,CAAA,KAAM;IACrBvB,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;EACjC,CAAC;EACH,oBACIL,OAAA,CAAAF,SAAA;IAAAgC,QAAA,EACIrB;EAAO,gBAKT,CAAC;AAGP,CAAC;AAAAP,EAAA,CA/DFD,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAgEX,eAAeA,aAAa;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}